import os
import customtkinter as ctk
from tkinter import Listbox, messagebox, filedialog
import pickle
import shutil

# CustomTkinter 설정
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("green")

# 타깃 URL 저장을 위한 딕셔너리
project_data = {}

# 프로젝트 목록 파일 경로
project_list_file = "projectlist.pkl"


# 프로젝트 목록 로드 또는 생성 함수
def load_projects():
    global project_data
    if os.path.exists(project_list_file):
        with open(project_list_file, "rb") as f:
            project_data = pickle.load(f)
    else:
        with open(project_list_file, "wb") as f:
            pickle.dump({}, f)

    update_project_list()


# 프로젝트 목록 저장 함수
def save_projects():
    with open(project_list_file, "wb") as f:
        pickle.dump(project_data, f)


# 로그인 검증 함수
def verify_login():
    username = username_entry.get()
    password = password_entry.get()

    if username == "admin" and password == "password":
        welcome_label.configure(text="Welcome, Admin!")
        login_frame.pack_forget()
        project_frame.pack(fill="both", expand=True)
    else:
        messagebox.showerror("Login Failed", "Invalid credentials, try again!")


# 프로젝트 생성 함수
def create_project():
    project_name = project_entry.get()

    if project_name:
        target_directory = filedialog.askdirectory(title="Select Directory for Project")
        if target_directory:
            project_path = os.path.join(target_directory, project_name)
            os.makedirs(project_path, exist_ok=True)  # 선택된 경로에 폴더 생성

            # 프로젝트 데이터를 저장
            project_data[project_name] = project_path
            save_projects()  # pkl 파일에 저장

            project_entry.delete(0, "end")
            messagebox.showinfo(
                "Success", f"Project '{project_name}' created at {target_directory}!"
            )
            update_project_list()
        else:
            messagebox.showwarning("Input Error", "No directory selected.")
    else:
        messagebox.showwarning("Input Error", "Please enter a project name.")


# 프로젝트 삭제 함수
def delete_project():
    selected_project = project_listbox.get("active")
    if selected_project:
        project_path = project_data[selected_project]
        try:
            shutil.rmtree(project_path)  # 폴더가 비어있지 않아도 삭제 가능
            del project_data[selected_project]  # 데이터에서 삭제
            save_projects()  # pkl 파일에 저장
            messagebox.showinfo("Success", f"Project '{selected_project}' deleted!")
            update_project_list()
        except OSError as e:
            messagebox.showwarning(
                "Error", f"An error occurred while deleting the project: {str(e)}"
            )
    else:
        messagebox.showwarning("Selection Error", "No project selected.")


# 프로젝트 목록 업데이트 함수
def update_project_list():
    project_listbox.delete(0, "end")
    for project_name in project_data:
        project_listbox.insert("end", project_name)


# 프로젝트 선택 함수
def select_project(event=None):
    selected_project = project_listbox.get("active")
    if selected_project:
        project_frame.pack_forget()

        project_path = project_data[selected_project]
        setting_file = os.path.join(project_path, "setting.pkl")

        if not os.path.exists(setting_file):
            # 타깃 URL 설정 프레임 표시
            show_url_frame(setting_file)
        else:
            diagnostic_frame.pack(fill="both", expand=True)
    else:
        messagebox.showwarning("Selection Error", "No project selected.")


# 타깃 URL 설정 프레임
def show_url_frame(setting_file):
    url_frame.pack(fill="both", expand=True)

    def save_target_url():
        target_url = url_entry.get()
        if target_url:
            with open(setting_file, "wb") as f:
                pickle.dump({"target_url": target_url}, f)
            url_entry.delete(0, "end")
            messagebox.showinfo("Success", "Target URL saved successfully!")
            url_frame.pack_forget()
            diagnostic_frame.pack(fill="both", expand=True)
        else:
            messagebox.showwarning("Input Error", "Please enter a target URL.")

    save_url_button.configure(command=save_target_url)


# 진단 실행 함수
def run_diagnostic():
    selected_vulns = [vuln for vuln, var in vuln_checkboxes.items() if var.get() == 1]
    if selected_vulns:
        log_console.insert(
            "end", f"Running diagnostic for: {', '.join(selected_vulns)}...\n"
        )
        log_console.yview_moveto(1)
    else:
        messagebox.showwarning("Selection Error", "No vulnerabilities selected.")


# 뒤로 가기 함수
def go_back():
    diagnostic_frame.pack_forget()
    project_frame.pack(fill="both", expand=True)


# 메인 창
root = ctk.CTk()
root.title("Hack Tool GUI")
root.geometry("900x600")

# 로그인 Frame
login_frame = ctk.CTkFrame(root, corner_radius=15)
login_frame.pack(fill="both", expand=True, padx=100, pady=100)

# 사용자 이름 라벨 및 입력란
username_label = ctk.CTkLabel(login_frame, text="Username", font=("Arial", 16, "bold"))
username_label.pack(pady=15)

username_entry = ctk.CTkEntry(
    login_frame, width=250, height=40, font=("Arial", 14), corner_radius=10
)
username_entry.pack(pady=10)

# 비밀번호 라벨 및 입력란
password_label = ctk.CTkLabel(login_frame, text="Password", font=("Arial", 16, "bold"))
password_label.pack(pady=15)

password_entry = ctk.CTkEntry(
    login_frame, show="*", width=250, height=40, font=("Arial", 14), corner_radius=10
)
password_entry.pack(pady=10)

# 로그인 버튼
login_button = ctk.CTkButton(
    login_frame,
    text="Login",
    command=verify_login,
    width=200,
    height=40,
    font=("Arial", 14),
    corner_radius=10,
)
login_button.pack(pady=30)

# 프로젝트 관리 Frame
project_frame = ctk.CTkFrame(root)
project_frame.pack_forget()

# 환영 라벨
welcome_label = ctk.CTkLabel(project_frame, text="", font=("Arial", 16, "bold"))
welcome_label.pack(pady=20)

# 프로젝트 목록 표시할 프레임 및 스크롤바 추가
listbox_frame = ctk.CTkFrame(project_frame)
listbox_frame.pack(side="left", fill="both", expand=True, padx=20, pady=20)

# Listbox와 Scrollbar 추가
scrollbar = ctk.CTkScrollbar(listbox_frame, orientation="vertical", corner_radius=10)
project_listbox = Listbox(
    listbox_frame,
    width=10,
    height=15,
    yscrollcommand=scrollbar.set,
    bg="#2c2c2c",
    fg="white",
    font=("Arial", 12),
    selectbackground="#1f4b99",
    highlightbackground="#444444",
)
scrollbar.configure(command=project_listbox.yview)
scrollbar.pack(side="right", fill="y", padx=5)
project_listbox.pack(side="left", fill="both", expand=True, padx=5)
project_listbox.bind("<Double-1>", select_project)

# 프로젝트 입력 및 버튼들
control_frame = ctk.CTkFrame(project_frame)
control_frame.pack(side="right", fill="y", padx=20, pady=20)

project_entry = ctk.CTkEntry(
    control_frame, width=200, height=40, placeholder_text="Enter project name"
)
project_entry.pack(pady=10)

create_button = ctk.CTkButton(
    control_frame, text="Create Project", command=create_project, width=200
)
create_button.pack(pady=5)

delete_button = ctk.CTkButton(
    control_frame, text="Delete Project", command=delete_project, width=200
)
delete_button.pack(pady=5)

# 진단 Frame
diagnostic_frame = ctk.CTkFrame(root)
diagnostic_frame.pack_forget()

# 진단 체크박스를 위한 프레임 (왼쪽에 세로로 배치)
vuln_frame = ctk.CTkFrame(diagnostic_frame)
vuln_frame.pack(side="left", fill="y", padx=20, pady=20)

# 취약점 체크박스 추가 (왼쪽에 배치)
vulns = [
    "SQL Injection",
    "OS Command Injection",
    "XXE Injection",
    "XSS",
    "CSRF",
    "File Download",
    "File Upload",
    "Parameter Tampering",
    "Path Traversal",
]

vuln_checkboxes = {}
for vuln in vulns:
    var = ctk.IntVar()
    cb = ctk.CTkCheckBox(vuln_frame, text=vuln, variable=var)
    cb.pack(anchor="w")
    vuln_checkboxes[vuln] = var

# 실행 및 뒤로 가기 버튼
action_frame = ctk.CTkFrame(diagnostic_frame)
action_frame.pack(side="bottom", fill="x", pady=20)

run_button = ctk.CTkButton(action_frame, text="Run Diagnostic", command=run_diagnostic)
run_button.pack(side="left", padx=20)

back_button = ctk.CTkButton(action_frame, text="Go Back", command=go_back)
back_button.pack(side="right", padx=20)

# 로그 콘솔 창 (오른쪽에 배치)
log_frame = ctk.CTkFrame(diagnostic_frame)
log_frame.pack(side="right", fill="both", expand=True, padx=20, pady=20)

log_console = ctk.CTkTextbox(log_frame, height=20)
log_console.pack(fill="both", expand=True)

# 타깃 URL 설정 Frame
url_frame = ctk.CTkFrame(root)
url_frame.pack_forget()

url_label = ctk.CTkLabel(url_frame, text="Enter Target URL", font=("Arial", 16, "bold"))
url_label.pack(pady=20)

url_entry = ctk.CTkEntry(url_frame, width=250, height=40)
url_entry.pack(pady=10)

save_url_button = ctk.CTkButton(url_frame, text="Save URL")
save_url_button.pack(pady=10)

# 프로젝트 목록 불러오기
load_projects()

# 메인 루프 시작
root.mainloop()
