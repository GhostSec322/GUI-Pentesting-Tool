import os
import customtkinter as ctk
from tkinter import Listbox, messagebox, filedialog
import pickle
import shutil

# CustomTkinter 설정
ctk.set_appearance_mode("dark")  # 어두운 모드 설정
ctk.set_default_color_theme("green")  # 기본 색상 테마 설정

# 타깃 URL 저장을 위한 딕셔너리
project_data = {}

# 프로젝트 목록 파일 경로
project_list_file = "projectlist.pkl"


# 프로젝트 목록 로드 또는 생성 함수
def load_projects():
    global project_data
    # 프로젝트 목록 파일이 존재하는지 확인
    if os.path.exists(project_list_file):
        with open(project_list_file, "rb") as f:
            project_data = pickle.load(f)  # pkl 파일에서 데이터 로드
    else:
        # 파일이 없으면 빈 딕셔너리로 생성
        with open(project_list_file, "wb") as f:
            pickle.dump({}, f)

    update_project_list()  # 프로젝트 목록 업데이트


# 프로젝트 목록 저장 함수
def save_projects():
    # 현재 프로젝트 데이터를 pkl 파일에 저장
    with open(project_list_file, "wb") as f:
        pickle.dump(project_data, f)


# 로그인 검증 함수
def verify_login():
    username = username_entry.get()  # 사용자 이름 가져오기
    password = password_entry.get()  # 비밀번호 가져오기

    # 로그인 검증 (하드코딩된 사용자 이름과 비밀번호)
    if username == "admin" and password == "password":
        welcome_label.configure(text="Welcome, Admin!")  # 환영 메시지 표시
        login_frame.pack_forget()  # 로그인 프레임 숨기기
        project_frame.pack(fill="both", expand=True)  # 프로젝트 프레임 표시
    else:
        messagebox.showerror(
            "Login Failed", "Invalid credentials, try again!"
        )  # 오류 메시지 표시


# 프로젝트 생성 함수
def create_project():
    project_name = project_entry.get()  # 입력된 프로젝트 이름 가져오기

    if project_name:
        # 프로젝트를 생성할 디렉토리 선택
        target_directory = filedialog.askdirectory(title="Select Directory for Project")
        if target_directory:
            project_path = os.path.join(
                target_directory, project_name
            )  # 프로젝트 경로 생성
            os.makedirs(project_path, exist_ok=True)  # 선택된 경로에 폴더 생성

            # 프로젝트 데이터를 저장
            project_data[project_name] = project_path
            save_projects()  # pkl 파일에 저장

            project_entry.delete(0, "end")  # 입력란 초기화
            messagebox.showinfo(
                "Success", f"Project '{project_name}' created at {target_directory}!"
            )  # 성공 메시지 표시
            update_project_list()  # 프로젝트 목록 업데이트
        else:
            messagebox.showwarning(
                "Input Error", "No directory selected."
            )  # 경로가 선택되지 않은 경우 경고 메시지
    else:
        messagebox.showwarning(
            "Input Error", "Please enter a project name."
        )  # 프로젝트 이름이 입력되지 않은 경우 경고 메시지


# 프로젝트 삭제 함수
def delete_project():
    selected_project = project_listbox.get("active")  # 선택된 프로젝트 가져오기
    if selected_project:
        project_path = project_data[selected_project]  # 선택된 프로젝트의 경로 가져오기
        try:
            shutil.rmtree(project_path)  # 폴더 삭제 (비어있지 않아도 가능)
            del project_data[selected_project]  # 데이터에서 선택된 프로젝트 삭제
            save_projects()  # pkl 파일에 저장
            messagebox.showinfo(
                "Success", f"Project '{selected_project}' deleted!"
            )  # 성공 메시지 표시
            update_project_list()  # 프로젝트 목록 업데이트
        except OSError as e:
            messagebox.showwarning(
                "Error", f"An error occurred while deleting the project: {str(e)}"
            )  # 삭제 중 오류 발생시 경고 메시지
    else:
        messagebox.showwarning(
            "Selection Error", "No project selected."
        )  # 프로젝트가 선택되지 않은 경우 경고 메시지


# 프로젝트 목록 업데이트 함수
def update_project_list():
    project_listbox.delete(0, "end")  # Listbox 초기화
    for project_name in project_data:
        project_listbox.insert("end", project_name)  # 프로젝트 이름 추가


# 프로젝트 선택 함수
def select_project(event=None):
    selected_project = project_listbox.get("active")  # 선택된 프로젝트 가져오기
    if selected_project:
        project_frame.pack_forget()  # 프로젝트 프레임 숨기기

        project_path = project_data[selected_project]  # 선택된 프로젝트의 경로 가져오기
        setting_file = os.path.join(project_path, "setting.pkl")  # 설정 파일 경로 생성

        if not os.path.exists(setting_file):
            # 설정 파일이 없는 경우, URL 설정 프레임 표시
            show_url_frame(setting_file)
        else:
            diagnostic_frame.pack(fill="both", expand=True)  # 진단 프레임 표시
    else:
        messagebox.showwarning(
            "Selection Error", "No project selected."
        )  # 프로젝트가 선택되지 않은 경우 경고 메시지


# 타깃 URL 설정 프레임
def show_url_frame(setting_file):
    url_frame.pack(fill="both", expand=True)  # URL 설정 프레임 표시

    def save_target_url():
        target_url = url_entry.get()  # 입력된 URL 가져오기
        if target_url:
            with open(setting_file, "wb") as f:
                pickle.dump({"target_url": target_url}, f)  # URL을 설정 파일에 저장
            url_entry.delete(0, "end")  # 입력란 초기화
            messagebox.showinfo(
                "Success", "Target URL saved successfully!"
            )  # 성공 메시지 표시
            url_frame.pack_forget()  # URL 프레임 숨기기
            diagnostic_frame.pack(fill="both", expand=True)  # 진단 프레임 표시
        else:
            messagebox.showwarning(
                "Input Error", "Please enter a target URL."
            )  # URL이 입력되지 않은 경우 경고 메시지

    save_url_button.configure(
        command=save_target_url
    )  # 버튼 클릭 시 save_target_url 호출


# 진단 실행 함수
def run_diagnostic():
    # 선택된 취약점 가져오기
    selected_vulns = [vuln for vuln, var in vuln_checkboxes.items() if var.get() == 1]
    if selected_vulns:
        log_console.insert(
            "end", f"Running diagnostic for: {', '.join(selected_vulns)}...\n"
        )  # 로그에 진단 내용 추가
        log_console.yview_moveto(1)  # 로그 뷰 스크롤
    else:
        messagebox.showwarning(
            "Selection Error", "No vulnerabilities selected."
        )  # 선택된 취약점이 없는 경우 경고 메시지


# 뒤로 가기 함수
def go_back():
    diagnostic_frame.pack_forget()  # 진단 프레임 숨기기
    project_frame.pack(fill="both", expand=True)  # 프로젝트 프레임 표시


# 메인 창
root = ctk.CTk()  # CustomTkinter 윈도우 생성
root.title("Hack Tool GUI")  # 윈도우 제목 설정
root.geometry("900x600")  # 윈도우 크기 설정

# 로그인 Frame
login_frame = ctk.CTkFrame(root, corner_radius=15)  # 로그인 프레임 생성
login_frame.pack(fill="both", expand=True, padx=100, pady=100)  # 프레임 배치

# 사용자 이름 라벨 및 입력란
username_label = ctk.CTkLabel(login_frame, text="Username", font=("Arial", 16, "bold"))
username_label.pack(pady=15)  # 라벨 배치

username_entry = ctk.CTkEntry(
    login_frame, width=250, height=40, font=("Arial", 14), corner_radius=10
)
username_entry.pack(pady=10)  # 입력란 배치

# 비밀번호 라벨 및 입력란
password_label = ctk.CTkLabel(login_frame, text="Password", font=("Arial", 16, "bold"))
password_label.pack(pady=15)  # 라벨 배치

password_entry = ctk.CTkEntry(
    login_frame, show="*", width=250, height=40, font=("Arial", 14), corner_radius=10
)
password_entry.pack(pady=10)  # 입력란 배치

# 로그인 버튼
login_button = ctk.CTkButton(
    login_frame,
    text="Login",
    command=verify_login,
    width=200,
    height=40,
    font=("Arial", 14),
    corner_radius=10,
)
login_button.pack(pady=30)  # 버튼 배치

# 프로젝트 관리 Frame
project_frame = ctk.CTkFrame(root)  # 프로젝트 관리 프레임 생성
project_frame.pack_forget()  # 처음에는 숨김

# 환영 라벨
welcome_label = ctk.CTkLabel(project_frame, text="", font=("Arial", 16, "bold"))
welcome_label.pack(pady=20)  # 라벨 배치

# 프로젝트 목록 표시할 프레임 및 스크롤바 추가
listbox_frame = ctk.CTkFrame(project_frame)  # 목록 프레임 생성
listbox_frame.pack(
    side="left", fill="both", expand=True, padx=20, pady=20
)  # 프레임 배치

# Listbox와 Scrollbar 추가
scrollbar = ctk.CTkScrollbar(
    listbox_frame, orientation="vertical", corner_radius=10
)  # 스크롤바 생성
project_listbox = Listbox(
    listbox_frame,
    width=10,
    height=15,
    yscrollcommand=scrollbar.set,  # 스크롤바와 연결
    bg="#2c2c2c",  # 배경 색상
    fg="white",  # 글자 색상
    font=("Arial", 12),
    selectbackground="#1f4b99",  # 선택된 항목 배경 색상
    highlightbackground="#444444",  # 선택되지 않은 항목의 강조 색상
)
scrollbar.configure(command=project_listbox.yview)  # Listbox와 스크롤바 연결
scrollbar.pack(side="right", fill="y", padx=5)  # 스크롤바 배치
project_listbox.pack(side="left", fill="both", expand=True, padx=5)  # Listbox 배치
project_listbox.bind("<Double-1>", select_project)  # 더블 클릭 시 프로젝트 선택

# 프로젝트 입력 및 버튼들
control_frame = ctk.CTkFrame(project_frame)  # 제어 프레임 생성
control_frame.pack(side="right", fill="y", padx=20, pady=20)  # 프레임 배치

project_entry = ctk.CTkEntry(
    control_frame,
    width=200,
    height=40,
    placeholder_text="Enter project name",  # 프로젝트 이름 입력란
)
project_entry.pack(pady=10)  # 입력란 배치

create_button = ctk.CTkButton(
    control_frame,
    text="Create Project",
    command=create_project,
    width=200,  # 프로젝트 생성 버튼
)
create_button.pack(pady=5)  # 버튼 배치

delete_button = ctk.CTkButton(
    control_frame,
    text="Delete Project",
    command=delete_project,
    width=200,  # 프로젝트 삭제 버튼
)
delete_button.pack(pady=5)  # 버튼 배치

# 진단 Frame
diagnostic_frame = ctk.CTkFrame(root)  # 진단 프레임 생성
diagnostic_frame.pack_forget()  # 처음에는 숨김

# 진단 체크박스를 위한 프레임
vuln_frame = ctk.CTkFrame(diagnostic_frame)  # 취약점 체크박스 프레임 생성
vuln_frame.pack(side="left", fill="y", padx=20, pady=20)  # 프레임 배치

# 취약점 체크박스입니다. 해당 취약점 선정과 기능구현은 OWASP Top 10 , 대한민국 행정안전부 취약점 진단 가이드라인을 참고하여 제작하였습니다.
vulns = [
    "SQL Injection",
    "OS Command Injection",
    "XXE Injection",
    "XSS",
    "CSRF",
    "File Download",
    "File Upload",
    "Parameter Tampering",
    "Path Traversal",
]

vuln_checkboxes = {}
for vuln in vulns:
    var = ctk.IntVar()  # 체크박스 상태 변수
    cb = ctk.CTkCheckBox(vuln_frame, text=vuln, variable=var)  # 체크박스 생성
    cb.pack(anchor="w")  # 체크박스 배치
    vuln_checkboxes[vuln] = var  # 체크박스 상태 변수 저장

# 실행 및 뒤로 가기 버튼
action_frame = ctk.CTkFrame(diagnostic_frame)  # 액션 프레임 생성
action_frame.pack(side="bottom", fill="x", pady=20)  # 프레임 배치

run_button = ctk.CTkButton(
    action_frame, text="Run Diagnostic", command=run_diagnostic
)  # 진단 실행 버튼
run_button.pack(side="left", padx=20)  # 버튼 배치

back_button = ctk.CTkButton(
    action_frame, text="Go Back", command=go_back
)  # 뒤로 가기 버튼
back_button.pack(side="right", padx=20)  # 버튼 배치

# 로그 콘솔 창 (오른쪽에 배치)
log_frame = ctk.CTkFrame(diagnostic_frame)  # 로그 프레임 생성
log_frame.pack(side="right", fill="both", expand=True, padx=20, pady=20)  # 프레임 배치

log_console = ctk.CTkTextbox(log_frame, height=20)  # 로그 콘솔 생성
log_console.pack(fill="both", expand=True)  # 콘솔 배치

# 타깃 URL 설정 Frame
url_frame = ctk.CTkFrame(root)  # URL 설정 프레임 생성
url_frame.pack_forget()  # 처음에는 숨김

url_label = ctk.CTkLabel(url_frame, text="Enter Target URL", font=("Arial", 16, "bold"))
url_label.pack(pady=20)  # 라벨 배치

url_entry = ctk.CTkEntry(url_frame, width=250, height=40)  # URL 입력란 생성
url_entry.pack(pady=10)  # 입력란 배치

save_url_button = ctk.CTkButton(url_frame, text="Save URL")  # URL 저장 버튼
save_url_button.pack(pady=10)  # 버튼 배치

# 프로젝트 목록 불러오기
load_projects()  # 프로젝트 목록 불러오기
root.mainloop()  # 메인 루프 시작
