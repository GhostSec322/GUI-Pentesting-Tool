import requests
from bs4 import BeautifulSoup


# SQL Injection payloads
payloads = [
    "2-1",
    "2 and 1=1",
    "2 and 1=2",
    "' or 1=1 -- ",
    "' or 1=1 #",
    "admin' or '1'='1",
]


def test_sql_injection(url, params, method="get"):
    """
    Test for SQL Injection vulnerabilities by injecting various payloads into parameters.

    Args:
        url (str): The target URL to test.
        params (dict): The GET or POST parameters for injection.
        method (str): The HTTP method (either "get" or "post"). Defaults to "get".

    Returns:
        vulnerabilities (list): A list of detected vulnerabilities, each as a dictionary.
    """
    vulnerabilities = []  # List to hold details of vulnerabilities found

    for param in params.keys():
        for payload in payloads:
            injected_params = params.copy()  # Copy the original parameters
            injected_params[param] = (
                payload  # Inject the payload into the current parameter
            )

            try:
                # Send the request based on the specified method (GET or POST)
                if method == "get":
                    response = requests.get(url, params=injected_params, timeout=10)
                elif method == "post":
                    response = requests.post(url, data=injected_params, timeout=10)
                else:
                    continue

                # Get a snippet of the response (first 200 characters)
                response_snippet = response.text[:200]

                # Check if the response contains common error or SQL syntax keywords
                if (
                    "error" in response.text.lower()
                    or "syntax" in response.text.lower()
                ):
                    vulnerability = {
                        "url": url,
                        "type": "SQL Injection",
                        "method": method.upper(),
                        "parameter": param,
                        "payload": payload,
                        "response_code": response.status_code,
                        "response_snippet": response_snippet,
                    }
                    vulnerabilities.append(vulnerability)
                    print(f"[!] Potential SQL Injection detected: {vulnerability}")

            # Handle exceptions such as timeouts or connection errors
            except requests.RequestException as e:
                vulnerability = {
                    "url": url,
                    "type": "SQL Injection",
                    "method": method.upper(),
                    "parameter": param,
                    "payload": payload,
                    "response_code": None,
                    "response_snippet": str(e),
                }
                vulnerabilities.append(vulnerability)
                print(f"[!] Error during request to {url}: {e}")

    return vulnerabilities  # Return the list of found vulnerabilitiese
